/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RPSOnlineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "commitMove"
      | "createMatch"
      | "matches"
      | "nextMatchId"
      | "revealMove"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MatchCreated"
      | "MatchResult"
      | "MoveCommitted"
      | "MoveRevealed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "commitMove",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createMatch",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "matches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextMatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealMove",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "commitMove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextMatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealMove", data: BytesLike): Result;
}

export namespace MatchCreatedEvent {
  export type InputTuple = [
    matchId: BigNumberish,
    creator: AddressLike,
    opponent: AddressLike
  ];
  export type OutputTuple = [
    matchId: bigint,
    creator: string,
    opponent: string
  ];
  export interface OutputObject {
    matchId: bigint;
    creator: string;
    opponent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MatchResultEvent {
  export type InputTuple = [matchId: BigNumberish, winner: AddressLike];
  export type OutputTuple = [matchId: bigint, winner: string];
  export interface OutputObject {
    matchId: bigint;
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MoveCommittedEvent {
  export type InputTuple = [matchId: BigNumberish, player: AddressLike];
  export type OutputTuple = [matchId: bigint, player: string];
  export interface OutputObject {
    matchId: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MoveRevealedEvent {
  export type InputTuple = [
    matchId: BigNumberish,
    player: AddressLike,
    move: BigNumberish
  ];
  export type OutputTuple = [matchId: bigint, player: string, move: bigint];
  export interface OutputObject {
    matchId: bigint;
    player: string;
    move: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RPSOnline extends BaseContract {
  connect(runner?: ContractRunner | null): RPSOnline;
  waitForDeployment(): Promise<this>;

  interface: RPSOnlineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  commitMove: TypedContractMethod<
    [matchId: BigNumberish, commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  createMatch: TypedContractMethod<
    [opponent: AddressLike],
    [bigint],
    "nonpayable"
  >;

  matches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, bigint, string] & {
        player1: string;
        player2: string;
        commit1: string;
        commit2: string;
        move1: bigint;
        move2: bigint;
        phase: bigint;
        winner: string;
      }
    ],
    "view"
  >;

  nextMatchId: TypedContractMethod<[], [bigint], "view">;

  revealMove: TypedContractMethod<
    [matchId: BigNumberish, move: BigNumberish, salt: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "commitMove"
  ): TypedContractMethod<
    [matchId: BigNumberish, commitment: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMatch"
  ): TypedContractMethod<[opponent: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "matches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint, bigint, string] & {
        player1: string;
        player2: string;
        commit1: string;
        commit2: string;
        move1: bigint;
        move2: bigint;
        phase: bigint;
        winner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextMatchId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revealMove"
  ): TypedContractMethod<
    [matchId: BigNumberish, move: BigNumberish, salt: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MatchCreated"
  ): TypedContractEvent<
    MatchCreatedEvent.InputTuple,
    MatchCreatedEvent.OutputTuple,
    MatchCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MatchResult"
  ): TypedContractEvent<
    MatchResultEvent.InputTuple,
    MatchResultEvent.OutputTuple,
    MatchResultEvent.OutputObject
  >;
  getEvent(
    key: "MoveCommitted"
  ): TypedContractEvent<
    MoveCommittedEvent.InputTuple,
    MoveCommittedEvent.OutputTuple,
    MoveCommittedEvent.OutputObject
  >;
  getEvent(
    key: "MoveRevealed"
  ): TypedContractEvent<
    MoveRevealedEvent.InputTuple,
    MoveRevealedEvent.OutputTuple,
    MoveRevealedEvent.OutputObject
  >;

  filters: {
    "MatchCreated(uint256,address,address)": TypedContractEvent<
      MatchCreatedEvent.InputTuple,
      MatchCreatedEvent.OutputTuple,
      MatchCreatedEvent.OutputObject
    >;
    MatchCreated: TypedContractEvent<
      MatchCreatedEvent.InputTuple,
      MatchCreatedEvent.OutputTuple,
      MatchCreatedEvent.OutputObject
    >;

    "MatchResult(uint256,address)": TypedContractEvent<
      MatchResultEvent.InputTuple,
      MatchResultEvent.OutputTuple,
      MatchResultEvent.OutputObject
    >;
    MatchResult: TypedContractEvent<
      MatchResultEvent.InputTuple,
      MatchResultEvent.OutputTuple,
      MatchResultEvent.OutputObject
    >;

    "MoveCommitted(uint256,address)": TypedContractEvent<
      MoveCommittedEvent.InputTuple,
      MoveCommittedEvent.OutputTuple,
      MoveCommittedEvent.OutputObject
    >;
    MoveCommitted: TypedContractEvent<
      MoveCommittedEvent.InputTuple,
      MoveCommittedEvent.OutputTuple,
      MoveCommittedEvent.OutputObject
    >;

    "MoveRevealed(uint256,address,uint8)": TypedContractEvent<
      MoveRevealedEvent.InputTuple,
      MoveRevealedEvent.OutputTuple,
      MoveRevealedEvent.OutputObject
    >;
    MoveRevealed: TypedContractEvent<
      MoveRevealedEvent.InputTuple,
      MoveRevealedEvent.OutputTuple,
      MoveRevealedEvent.OutputObject
    >;
  };
}
